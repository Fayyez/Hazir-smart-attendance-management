# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\Hazir-smart-attendance-management\src\attendace_session_final.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtWidgets import QMessageBox, QLineEdit
from PyQt5.QtCore import QUrl
import os, cv2, json, sys
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtCore import QTimer
import face_recognition
import pandas as pd
from Classes.classes import ClassRoom, Student
import pyttsx3

folder_path = os.getcwd() + '/src'
sample_classroom = {'sn_123_class_2' : ClassRoom('Human And Computer Interaction', 9, "sn_123", 'sn_123_class_2')}
def text_to_speech(text):
    engine = pyttsx3.init()
    engine.say(text)
    engine.runAndWait()

class PasswordDialog(QtWidgets.QDialog):

    def __init__(self):
        super().__init__()
        self.setWindowTitle("Password Confirmation")
        self.setFixedSize(300, 100)

        self.label = QtWidgets.QLabel("Enter Password:", self)
        self.password_input =  QtWidgets.QLineEdit(self)
        self.password_input.setEchoMode(QtWidgets.QLineEdit.Password)

        self.confirm_button =  QtWidgets.QPushButton("Confirm", self)
        self.confirm_button.clicked.connect(self.check_password)

        layout =  QtWidgets.QVBoxLayout(self)
        layout.addWidget(self.label)
        layout.addWidget(self.password_input)
        layout.addWidget(self.confirm_button)

    def check_password(self):
        if self.password_input.text() == "4321":
            self.accept()
        else:
             QtWidgets.QMessageBox.warning(self, "Wrong Password", "Incorrect password. Please try again.")

    def get_password_confirmation(self):
        return self.exec_() ==  QtWidgets.QDialog.Accepted

class Ui_Dialog(object):
    attendance = []
    count = 0
    currentwindow = None

    def setupUi(self, Dialog):
        self.currentwindow = Dialog
        Dialog.setObjectName("Dialog")
        Dialog.resize(1000, 700)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(47, 60, 126))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(47, 60, 126))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(47, 60, 126))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(47, 60, 126))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(47, 60, 126))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(47, 60, 126))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(47, 60, 126))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(47, 60, 126))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(47, 60, 126))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        Dialog.setPalette(palette)
        Dialog.setStyleSheet("background-color:#2f3c7e")
        self.id_input_box = QtWidgets.QLineEdit(Dialog)
        self.id_input_box.setGeometry(QtCore.QRect(60, 220, 341, 51))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.id_input_box.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.id_input_box.setFont(font)
        self.id_input_box.setStyleSheet("background-color:#fbeaeb;\n"
"border-radius : 10px; ")
        self.id_input_box.setText("")
        self.id_input_box.setObjectName("id_input_box")
        self.manual_entry_heading = QtWidgets.QLabel(Dialog)
        self.manual_entry_heading.setGeometry(QtCore.QRect(130, 60, 181, 51))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.manual_entry_heading.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.manual_entry_heading.setFont(font)
        self.manual_entry_heading.setStyleSheet("background-color:#fbeaeb;\n"
"border-radius : 10px; ")
        self.manual_entry_heading.setObjectName("manual_entry_heading")
        self.enter_button = QtWidgets.QPushButton(Dialog)
        self.enter_button.setGeometry(QtCore.QRect(240, 310, 151, 41))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.enter_button.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setFamily("Yu Gothic UI Semibold")
        self.enter_button.setFont(font)
        self.enter_button.setStyleSheet("background-color:#fbeaeb;\n"
"border-radius : 10px; ")
        self.enter_button.setDefault(True)
        self.enter_button.setObjectName("enter_button")
        self.enter_button.clicked.connect(self.enterPressed)
        self.text_to_speech_output_box = QtWidgets.QTextBrowser(Dialog)
        self.text_to_speech_output_box.setFont(font)
        self.text_to_speech_output_box.setGeometry(QtCore.QRect(60, 390, 301, 251))
        self.text_to_speech_output_box.setStyleSheet("background-color:#fbeaeb;")
        self.text_to_speech_output_box.setObjectName("text_to_speech_output_box")
        self.name_input_box = QtWidgets.QLineEdit(Dialog)
        self.name_input_box.setGeometry(QtCore.QRect(60, 140, 341, 51))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.name_input_box.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.name_input_box.setFont(font)
        self.name_input_box.setStyleSheet("background-color:#fbeaeb;\n"
"border-radius : 10px; ")
        self.name_input_box.setText("")
        self.name_input_box.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.name_input_box.setObjectName("name_input_box")
        self.attendance_session_dialog = QtWidgets.QWidget(Dialog)
        self.attendance_session_dialog.setGeometry(QtCore.QRect(20, 30, 421, 661))
        self.attendance_session_dialog.setObjectName("attendance_session_dialog")
        self.sound_icon_button = QtWidgets.QPushButton(self.attendance_session_dialog)
        self.sound_icon_button.setGeometry(QtCore.QRect(340, 360, 51, 51))
        self.sound_icon_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("d:\\Hazir-smart-attendance-management\\src/assets/speaker.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.sound_icon_button.setIcon(icon)
        self.sound_icon_button.setIconSize(QtCore.QSize(45, 45))
        self.sound_icon_button.setDefault(False)
        self.sound_icon_button.setObjectName("sound_icon_button")
        self.end_session_button = QtWidgets.QPushButton(Dialog)
        self.end_session_button.setGeometry(QtCore.QRect(550, 560, 331, 81))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 234, 235, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        self.end_session_button.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.end_session_button.setFont(font)
        self.end_session_button.setMouseTracking(True)
        self.end_session_button.setStyleSheet("background-color:red;")
        self.end_session_button.setCheckable(False)
        self.end_session_button.setChecked(False)
        self.end_session_button.setAutoRepeat(False)
        self.end_session_button.setDefault(True)
        self.end_session_button.setFlat(False)
        self.end_session_button.setObjectName("end_session_button")
        self.camera_box = QtWidgets.QWidget(Dialog)
        self.camera_box.setGeometry(QtCore.QRect(470, 50, 511, 441))
        self.camera_box.setStyleSheet("background-color:#fbeaeb;\n"
"border-radius : 10px; ")
        self.camera_box.setObjectName("camera_box")
        self.attendance_session_dialog.raise_()
        self.manual_entry_heading.raise_()
        self.enter_button.raise_()
        self.id_input_box.raise_()
        self.name_input_box.raise_()
        self.text_to_speech_output_box.raise_()
        self.end_session_button.raise_()
        self.camera_box.raise_()
        self.camera_label = QtWidgets.QLabel(Dialog)
        self.camera_label.setGeometry(QtCore.QRect(480, 60, 491, 421))
        self.camera_label.setStyleSheet("background-color:#fbeaeb;\n" "border-radius: 10px;")
        self.camera_label.setObjectName("camera_label")
        
        self.end_session_button.clicked.connect(self.generate_report)
            
        # Initialize variables for camera capture
        self.video = cv2.VideoCapture(0)  # Use '0' for the default camera

        # Set up QTimer to update camera feed
        self.timer = QTimer(Dialog)
        self.timer.timeout.connect(self.update_frame)
        self.timer.start(10)  # Update frame every 10 milliseconds

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
    
    def generate_report(self):
        # show popup with one text field for conifirm password
        name = self.name_input_box.text()
        roll_no = self.id_input_box.text()
        password_dialog = PasswordDialog()
        if not password_dialog.get_password_confirmation():
            text_to_speech("incorrect password")
            self.text_to_speech_output_box.append("incorrect password")
            self.name_input_box.setText("")
            self.id_input_box.setText("")
        else :
            #we will have to get the student data from the database in the form of a list of list as shown below
            students = [
                ['Muhammad zohaib zahid ',7853, 'Present'],
                ['Muhammad danish',7899, 'Absent'],
                ['fayeez farrukh', 7944, 'Absent'],
                ['eehab saddat', 7890, 'Absent'],
                ['Uffan Mehmood khan',7947, 'Absent'],
                ['student 6',6, 'Absent'],
                ['student 7',7, 'Absent'],
                ['student 8',8, 'Absent']
            ]
            #Create a DataFrame from the student data
            df = pd.DataFrame(students, columns=['Name', 'Roll No', 'Attendance'])

            # Save the DataFrame to an Excel file
            excel_file_path = folder_path + f'/output/attendancereport.xlsx'  # File name for the Excel file
            df.to_excel(excel_file_path, index=False)
            
            print(f"Excel file '{excel_file_path}' has been generated successfully.")
            # how to display this in screen need to be implemnted
            from room_infromation import Ui_RoomInfo
            app = QtWidgets.QApplication(sys.argv)
            room_info = Ui_RoomInfo()
            window = QtWidgets.QDialog()
            room_info.setupUi(window, sample_classroom)
            self.currentwindow.close() # close the last window
            window.show()
            window.exec_()
            sys.exit(app.exec_())

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.id_input_box.setPlaceholderText(_translate("Dialog", "Enter ID"))
        self.manual_entry_heading.setText(_translate("Dialog", "Manual Entry"))
        self.enter_button.setText(_translate("Dialog", "Enter"))
        self.enter_button.setShortcut(_translate("Dialog", "Return"))
        self.name_input_box.setPlaceholderText(_translate("Dialog", "Enter name"))
        self.end_session_button.setText(_translate("Dialog", "End Session"))
#self.text_to_speech_output_box.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
# "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
# "p, li { white-space: pre-wrap; }\n"
# "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">text to speech output</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">s</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">s</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">s</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">s</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">s</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">s</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">s</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">s</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">sd</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">sd</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">sd</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">sd</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">s</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">dsd</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">as</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">as</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">as</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">as</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">as</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">as</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">as</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">as</p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">as</p></body></html>"))


    def update_frame(self):
        ret, frame = self.video.read()
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        h, w, ch = frame.shape
        bytes_per_line = ch * w
        convert_to_qt_format = QImage(frame.data, w, h, bytes_per_line, QImage.Format_RGB888)
        pixmap = QPixmap.fromImage(convert_to_qt_format)
        self.camera_label.setPixmap(pixmap)
        #######################
    
        face_locations = face_recognition.face_locations(frame)  # Detecting the face
        if self.count == 0:
            for face_location in face_locations:
                top, right, bottom, left = face_location
                # show a green square on the face detected
                cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
                face_encodings = face_recognition.face_encodings(frame, [face_location])  # Encoding the detected face
                if len(face_encodings) > 0: # if a face is detected
                    img_encode = face_encodings[0]  # first detected face
                    result = face_recognition.compare_faces(student_encodes(), img_encode, tolerance=0.5)  # comparing with the saved encoded data and captured frame data
                    print(result)
                    if True in result:
                        print('found')
                        text_to_speech("Fayyez Marked Present")
                        self.text_to_speech_output_box.append("Fayyez Marked Present")
                        self.count = 1
                    else:
                        text_to_speech("student not found in records")
                        self.text_to_speech_output_box.append("student not found in records")

    def enterPressed(self):
        # show popup with one text field for conifirm password
        name = self.name_input_box.text()
        roll_no = self.id_input_box.text()
        password_dialog = PasswordDialog()
        if password_dialog.get_password_confirmation():
            text_to_speech("fayyez is already Marked Present")
            self.text_to_speech_output_box.append("fayyez is already Marked Present")
            self.name_input_box.setText("")
            self.id_input_box.setText("")
        else :
            text_to_speech("incorrect password")
            self.text_to_speech_output_box.append("incorrect password")
            self.name_input_box.setText("")
            self.id_input_box.setText("")



def student_encodes():
    encodesaves = np.loadtxt('all_encoding.txt', delimiter=',')    
    return encodesaves

def anyindex(result) -> int :
    for index in range(len(result)):
        if result[index]:
            return index
    return -1
